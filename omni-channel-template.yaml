AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Full Omni-Channel Serverless Architecture 
  - Customers, Inventory, Orders, Payment, Fulfillment, Notifications
  - Each referencing their respective tables
  - Payment -> Orders + Ext Gateway + SQS
  - Fulfillment -> Orders + SQS

Parameters:
  StageName:
    Type: String
    Default: dev
    Description: "Deployment stage (e.g. dev, prod)"

Resources:
  ################################################
  # 1) API GATEWAY 
  ################################################
  RetailRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "RetailApi-${StageName}"

  RetailApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RetailRestApi
      StageName: !Ref StageName
    DependsOn:
      - ApiResourceCustomersGET
      - ApiResourceInventoryGET
      - ApiResourceOrdersGET
      - ApiResourcePaymentPOST
      - ApiResourceFulfillmentPOST
      - ApiResourceNotificationsPOST

  # Root => /api
  RetailApiRoot:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RetailRestApi
      ParentId: !GetAtt "RetailRestApi.RootResourceId"
      PathPart: "api"

  # Subresources => /customers, /inventory, /orders, /payment, /fulfillment, /notifications
  ApiResourceCustomers:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RetailRestApi
      ParentId: !Ref RetailApiRoot
      PathPart: "customers"

  ApiResourceInventory:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RetailRestApi
      ParentId: !Ref RetailApiRoot
      PathPart: "inventory"

  ApiResourceOrders:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RetailRestApi
      ParentId: !Ref RetailApiRoot
      PathPart: "orders"

  ApiResourcePayment:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RetailRestApi
      ParentId: !Ref RetailApiRoot
      PathPart: "payment"

  ApiResourceFulfillment:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RetailRestApi
      ParentId: !Ref RetailApiRoot
      PathPart: "fulfillment"

  ApiResourceNotifications:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RetailRestApi
      ParentId: !Ref RetailApiRoot
      PathPart: "notifications"

  ################################################
  # 2) DYNAMODB TABLES 
  ################################################
  CustomersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "CustomersTable-${StageName}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: CustomerId
          AttributeType: S
      KeySchema:
        - AttributeName: CustomerId
          KeyType: HASH

  InventoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "InventoryTable-${StageName}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: SKU
          AttributeType: S
      KeySchema:
        - AttributeName: SKU
          KeyType: HASH

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "OrdersTable-${StageName}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: OrderId
          AttributeType: S
      KeySchema:
        - AttributeName: OrderId
          KeyType: HASH

  ################################################
  # 3) SQS QUEUE (FULFILLMENT)
  ################################################
  FulfillmentQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "FulfillmentQueue-${StageName}"

  ################################################
  # 4) LAMBDAS + ROLES
  ################################################

  ########################################
  # 4.1 CustomersLambda 
  ########################################
  CustomersLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "CustomersLambda-${StageName}"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt CustomersLambdaRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ddb = new AWS.DynamoDB.DocumentClient();
          exports.handler = async (event) => {
            // Example: handle GET / POST for customer profiles
            // Minimal logic: always PUT a new item
            let customerId = 'CUST-001'; // parse from event in real code
            await ddb.put({
              TableName: process.env.CUSTOMERS_TABLE,
              Item: { CustomerId: customerId, name: 'Jane Doe' }
            }).promise();
            return { statusCode: 200, body: JSON.stringify({ message: 'Customer saved' }) };
          };
      Environment:
        Variables:
          CUSTOMERS_TABLE: !Ref CustomersTable

  CustomersLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ "lambda.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Path: "/"
      Policies:
        - PolicyName: CustomersLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt CustomersTable.Arn

  ApiResourceCustomersGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RetailRestApi
      ResourceId: !Ref ApiResourceCustomers
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CustomersLambdaFunction.Arn}/invocations"

  CustomersLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt CustomersLambdaFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RetailRestApi}/*/GET/api/customers"

  ########################################
  # 4.2 InventoryLambda 
  ########################################
  InventoryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "InventoryLambda-${StageName}"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt InventoryLambdaRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ddb = new AWS.DynamoDB.DocumentClient();
          exports.handler = async (event) => {
            // Example: check or update stock in InventoryTable
            let sku = 'SKU-ABC'; // parse from request
            // Decrement stock
            await ddb.update({
              TableName: process.env.INVENTORY_TABLE,
              Key: { SKU: sku },
              UpdateExpression: "ADD stock :negOne",
              ExpressionAttributeValues: {
                ":negOne": -1
              },
              ReturnValues: "UPDATED_NEW"
            }).promise();
            return { statusCode: 200, body: JSON.stringify({ message: 'Inventory updated' }) };
          };
      Environment:
        Variables:
          INVENTORY_TABLE: !Ref InventoryTable

  InventoryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ "lambda.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Path: "/"
      Policies:
        - PolicyName: InventoryLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt InventoryTable.Arn

  ApiResourceInventoryGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RetailRestApi
      ResourceId: !Ref ApiResourceInventory
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InventoryLambdaFunction.Arn}/invocations"

  InventoryLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt InventoryLambdaFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RetailRestApi}/*/GET/api/inventory"

  ########################################
  # 4.3 OrdersLambda 
  ########################################
  OrdersLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "OrdersLambda-${StageName}"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt OrdersLambdaRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ddb = new AWS.DynamoDB.DocumentClient();
          exports.handler = async (event) => {
            // e.g., Create or fetch orders
            let orderId = 'ORDER-100';
            await ddb.put({
              TableName: process.env.ORDERS_TABLE,
              Item: { OrderId: orderId, PaymentStatus: 'UNPAID', Items: [{sku:'SKU-ABC'}] }
            }).promise();
            return { statusCode: 200, body: JSON.stringify({ message: `Order ${orderId} created` }) };
          };
      Environment:
        Variables:
          ORDERS_TABLE: !Ref OrdersTable

  OrdersLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ "lambda.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Path: "/"
      Policies:
        - PolicyName: OrdersLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt OrdersTable.Arn

  ApiResourceOrdersGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RetailRestApi
      ResourceId: !Ref ApiResourceOrders
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrdersLambdaFunction.Arn}/invocations"

  OrdersLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt OrdersLambdaFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RetailRestApi}/*/GET/api/orders"

  ########################################
  # 4.4 PaymentLambda 
  ########################################
  PaymentLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "PaymentLambda-${StageName}"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt PaymentLambdaRole.Arn
      Environment:
        Variables:
          ORDERS_TABLE: !Ref OrdersTable
          FULFILLMENT_QUEUE_URL: !Ref FulfillmentQueue
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ddb = new AWS.DynamoDB.DocumentClient();
          const sqs = new AWS.SQS();
          exports.handler = async (event) => {
            // 1) parse the orderId from request
            let orderId = 'ORDER-100'; 
            // 2) read the order from Dynamo
            let orderRes = await ddb.get({
              TableName: process.env.ORDERS_TABLE,
              Key: { OrderId: orderId }
            }).promise();
            console.log("Order found:", orderRes);

            // 3) call external Payment Gateway => placeholder
            console.log("Paying external gateway... success!");

            // 4) Update OrdersTable => PaymentStatus = 'PAID'
            await ddb.update({
              TableName: process.env.ORDERS_TABLE,
              Key: { OrderId: orderId },
              UpdateExpression: "set PaymentStatus = :paid",
              ExpressionAttributeValues: { ":paid": "PAID" }
            }).promise();

            // 5) Send SQS message => Fulfillment
            await sqs.sendMessage({
              QueueUrl: process.env.FULFILLMENT_QUEUE_URL,
              MessageBody: JSON.stringify({
                eventType: "ORDER_PAID",
                orderId: orderId
              })
            }).promise();

            return {
              statusCode: 200,
              body: JSON.stringify({ message: `Payment done for ${orderId}` })
            };
          };
  PaymentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ "lambda.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Path: "/"
      Policies:
        - PolicyName: PaymentLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt OrdersTable.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt FulfillmentQueue.Arn

  ApiResourcePaymentPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RetailRestApi
      ResourceId: !Ref ApiResourcePayment
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PaymentLambdaFunction.Arn}/invocations"

  PaymentLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt PaymentLambdaFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RetailRestApi}/*/POST/api/payment"

  ########################################
  # 4.5 FulfillmentLambda 
  ########################################
  FulfillmentLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "FulfillmentLambda-${StageName}"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt FulfillmentLambdaRole.Arn
      Environment:
        Variables:
          ORDERS_TABLE: !Ref OrdersTable
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ddb = new AWS.DynamoDB.DocumentClient();
          exports.handler = async (event) => {
            // SQS messages => we handle ORDER_PAID
            for (let record of event.Records) {
              let msg = JSON.parse(record.body);
              if (msg.eventType === "ORDER_PAID") {
                console.log("Fulfillment for", msg.orderId);
                // read the order
                let orderData = await ddb.get({
                  TableName: process.env.ORDERS_TABLE,
                  Key: { OrderId: msg.orderId }
                }).promise();
                // placeholder => call external Carriers
                console.log("Calling carrier... shipping the item!");
                // update order => FulfillmentStatus
                await ddb.update({
                  TableName: process.env.ORDERS_TABLE,
                  Key: { OrderId: msg.orderId },
                  UpdateExpression: "set FulfillmentStatus = :fs",
                  ExpressionAttributeValues: { ":fs": "SHIPPED" }
                }).promise();
              }
            }
            return { statusCode: 200 };
          };
      Events:
        FulfillmentQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt FulfillmentQueue.Arn

  FulfillmentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ "lambda.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Path: "/"
      Policies:
        - PolicyName: FulfillmentLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt FulfillmentQueue.Arn
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt OrdersTable.Arn

  ApiResourceFulfillmentPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RetailRestApi
      ResourceId: !Ref ApiResourceFulfillment
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FulfillmentLambdaFunction.Arn}/invocations"

  FulfillmentLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt FulfillmentLambdaFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RetailRestApi}/*/POST/api/fulfillment"

  ########################################
  # 4.6 NotificationsLambda
  ########################################
  NotificationsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "NotificationsLambda-${StageName}"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt NotificationsLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            // Possibly send emails or push notifications
            console.log("Notifications triggered!");
            return { statusCode: 200, body: JSON.stringify({ message: "Notified" }) };
          };

  NotificationsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ "lambda.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Path: "/"
      Policies:
        - PolicyName: NotificationsLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              # Potentially also allow SNS or SES

  ApiResourceNotificationsPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RetailRestApi
      ResourceId: !Ref ApiResourceNotifications
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotificationsLambdaFunction.Arn}/invocations"

  NotificationsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt NotificationsLambdaFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RetailRestApi}/*/POST/api/notifications"

  ################################################
  # 5) CLOUDFRONT (Optional for hosting front-end)
  ################################################
  RetailCloudFrontDist:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          ViewerProtocolPolicy: "allow-all"
          TargetOriginId: "S3Origin"
          ForwardedValues:
            QueryString: false
        Origins:
          - Id: "S3Origin"
            DomainName: "example-bucket.s3.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultRootObject: "index.html"

Outputs:
  ApiBaseURL:
    Description: "Base endpoint for the entire API"
    Value: !Sub "https://${RetailRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/api"

  CustomersTableName:
    Description: "Customers table name"
    Value: !GetAtt CustomersTable.TableName

  InventoryTableName:
    Description: "Inventory table name"
    Value: !GetAtt InventoryTable.TableName

  OrdersTableName:
    Description: "Orders table name"
    Value: !GetAtt OrdersTable.TableName

  FulfillmentQueueURL:
    Description: "SQS queue URL"
    Value: !Ref FulfillmentQueue

  CloudFrontDomain:
    Description: "Domain for the CloudFront distribution"
    Value: !GetAtt RetailCloudFrontDist.DomainName
